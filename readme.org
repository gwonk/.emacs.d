#+TITLE: Emacs Literate Configuration
#+AUTHOR:  Eric Miller
#+PROPERTY: header-args :tangle yes

* Introduction
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#introduction][Introduction]]
  - [[#about-this-file][About this file]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#settings][Settings]]
  - [[#integrate-with-use-package][Integrate with use-package]]
- [[#display][Display]]
  - [[#turn-stuff-off][Turn stuff off]]
  - [[#theme][Theme]]
  - [[#whitespace][Whitespace]]
  - [[#dashboard][Dashboard]]
- [[#wordsmithing][Wordsmithing]]
  - [[#configure-text-encoding][Configure text encoding]]
  - [[#hippie-expand][Hippie expand]]
  - [[#olivetti][Olivetti]]
  - [[#flyspell][Flyspell]]
  - [[#dictionary][Dictionary]]
  - [[#fill-mode][Fill mode]]
  - [[#annotations][Annotations]]
- [[#completion-frameworks][Completion Frameworks]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
  - [[#company][Company]]
- [[#embark][Embark]]
- [[#eshell][EShell]]
- [[#git][Git]]
  - [[#enable-git-gutter-fringe][Enable git-gutter-fringe]]
  - [[#git-configuration-file-mode][git configuration file mode]]
  - [[#git-blame-in-a-buffer][git blame in a buffer]]
  - [[#magit][Magit]]
- [[#programming][Programming]]
  - [[#eldoc][ElDoc]]
  - [[#lsp-mode][lsp-mode]]
  - [[#rust][Rust]]
    - [[#rustic][Rustic]]
  - [[#cc][C/C++]]
  - [[#debugging-dap-mode][Debugging (dap-mode)]]
  - [[#flycheck][Flycheck]]
  - [[#typescript][Typescript]]
- [[#org-mode][Org mode]]
  - [[#denote][DeNote]]
  - [[#deft][Deft]]
  - [[#toc-org][Toc-org]]
  - [[#kanban][Kanban]]
  - [[#babel][Babel]]
- [[#mastodon][Mastodon]]
- [[#misc-helpful-settings][Misc helpful settings]]
  - [[#dictionary-1][Dictionary]]
  - [[#which-key][Which-key]]
  - [[#save-history][Save History]]
  - [[#auto-revert-mode][Auto-revert mode]]
- [[#macos][MacOS]]
- [[#post-initialization][Post Initialization]]

** About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

I started with the files authored by Andr√©s Ejmson and titled [[https://github.com/frap/emacs-literate][Atea Emacs
Literate Configuration]].  This version has been almost complete
rebuilt.  This branch is using the elpaca package manager.

** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+begin_src :tangle no
header-args :tangle yes
#+end_src

This tells emacs to automatically tangle (include) all code blocks in
this file when generating the code for the config, unless the code
block explicitly includes =:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that
defines the visibility that tells org to show it's direct children on
startup. This way a clean outline of all sub headings under
Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag:
=:TOC_3_gh:=. This tells an org-mode package =toc-org= to generate a table
of contents under this heading that has a max depth of 3 and is
created using Github-style hrefs. This table of contents is updated
everytime the file is saved and makes for a functional table of
contents that works property directly on github.

** Personal Information
Let's set some variables with basic user information.

#+begin_src emacs-lisp
(setq user-full-name "Eric Miller"
      user-mail-address "eric@gwonk.com")
#+end_src

* Emacs Initialization

** Settings
We're going to increase the gc-cons-threshold to a very high number to
decrease the load and compile time.  We'll lower this value
significantly after initialization has completed. We don't want to
keep this value too high or it will result in long GC pauses during
normal usage.

#+begin_src emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+end_src

Disable certain byte compiler warnings to cut down on the noise. This
is a personal choice and can be removed if you would like to see any
and all byte compiler warnings.

#+begin_src emacs-lisp
  (setq byte-compile-warnings
        '(not free-vars unresolved noruntime lexical make-local))
#+end_src

** Integrate with use-package

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

* Display

** Turn stuff off

#+begin_src emacs-lisp
  (blink-cursor-mode -1)
  (tool-bar-mode -1)
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init
    (setq solarized-use-variable-pitch nil
          solarized-scale-org-headlines nil)
    (load-theme 'solarized-light t))
#+END_SRC

** Whitespace

Don't use tab characters and indent 4 chars

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src

Require a newline at the end of file

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

Delete selection

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :preface
    (defun ejm/dashboard-banner ()
      "Set a dashboard banner including information on package initialization time and garbage collection."
      (setq dashboard-banner-logo-title
            (format "Emace ready in %.2f seconds with %d garbage collections."
                    (float-time (time-subtract after-init-time before-init-time)) gcs-done)))
    :config
    (setq dashboard-startup-banner 'logo)
    (dashboard-setup-startup-hook)
    :hook ((elpaca-after-init . dashboard-refresh-buffer)
           (dashboard-mode    . ejm/dashboard-banner)))
#+end_src

* Wordsmithing

Text editing options

** Configure text encoding

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src

** Hippie expand

#+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))

  ;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") #'hippie-expand)
  (global-set-key (kbd "s-/") #'hippie-expand)
#+end_src

** Olivetti

#+begin_src emacs-lisp
   ;; Distraction-free screen
  (use-package olivetti
    :init
    (setq olivetti-body-width .67)
    :config
    (defun distraction-free ()
      "Distraction-free writing environment"
      (interactive)
      (if (equal olivetti-mode nil)
          (progn
            (window-configuration-to-register 1)
            (delete-other-windows)
            (text-scale-increase 2)
            (olivetti-mode t))
        (progn
          (jump-to-register 1)
          (olivetti-mode 0)
          (text-scale-decrease 2))))
    :bind
    (("<f9>" . distraction-free)))
#+end_src

** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :elpaca nil
    :config
      (when (eq system-type 'windows-nt)
        (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/"))
      (setq ispell-program-name "aspell" ; use aspell instead of ispell
           ispell-extra-args '("--sug-mode=ultra"))
      (add-hook 'text-mode-hook #'flyspell-mode)
      (add-hook 'prog-mode-hook #'flyspell-prog-mode)
    :delight "")
#+end_src

** Dictionary

As suggested in [[https://irreal.org/blog/?p=10824][Webster 1913 and dictionary.el]]

#+begin_src emacs-lisp
  (setq dictionary-server "dict.org")
#+end_src

** Fill mode

Automatically wrap text.

#+begin_src emacs-lisp
  (use-package emacs
    :elpaca nil
    :bind (("C-c T f" . auto-fill-mode)
           ("C-c T t" . toggle-truncate-lines))
    :init (add-hook 'org-mode-hook 'turn-on-auto-fill)
    :diminish auto-fill-mode)
#+end_src

** Annotations

#+begin_src emacs-lisp
  (use-package annotate
    :config
    (add-hook 'prog-mode-hook #'annotate-mode))
#+end_src

#+RESULTS:
| elpaca< | annotate | annotate | annotate | (queued) | /Users/ericm/.emacs.d/elpaca/repos/annotate/ | /Users/ericm/.emacs.d/elpaca/builds/annotate | nil | nil | (elpaca--clone elpaca--configure-remotes elpaca--checkout-ref elpaca--run-pre-build-commands elpaca--clone-dependencies elpaca--link-build-files elpaca--generate-autoloads-async elpaca--byte-compile elpaca--compile-info elpaca--install-info elpaca--add-info-path elpaca--run-post-build-commands elpaca--activate-package) | (:package annotate :fetcher github :repo bastibe/annotate.el :files (*.el *.el.in dir *.info *.texi *.texinfo doc/dir doc/*.info doc/*.texi doc/*.texinfo lisp/*.el (:exclude .dir-locals.el test.el tests.el *-test.el *-tests.el LICENSE README* *-pkg.el)) :protocol https :inherit t :depth 1) | nil | nil | nil | nil | 2 | (25700 8549 863789 0) | nil | nil | ((queued (25700 8549 863793 0) Package queued 1)) | nil |

* Completion Frameworks

** Vertico

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

** Marginalia

#+begin_src emacs-lisp
  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

** Consult

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x C-b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flymake
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-org-heading)               ;; Alternative: consult-outline
           ("M-g a" . consult-org-agenda)

           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    ;(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    ;(consult-customize
    ; consult-theme
    ; :preview-key '(:debounce 0.2 any)
    ; consult-ripgrep consult-git-grep consult-grep
    ; consult-bookmark consult-recent-file consult-xref
    ; consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
    ; :preview-key '(kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )
  (use-package consult-flycheck
    :ensure t
    :custom
    (set-face-attribute 'flycheck-posframe-error-face
                        nil
                        :inherit nil
                        :foreground "red"))
#+end_src

** Company

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :ensure t
    :custom
    (company-idle-delay 0.5) ;; how long to wait until popup
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("M-<" . company-select-first)
          ("M->" . company-select-last))
     )
#+end_src

* Embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* EShell

Start the eshell and bind f12 to the swap function.

#+begin_src emacs-lisp
  (use-package eshell
    :elpaca nil
    :ensure t
    :config
    (defvar ejm-save-buffer "*scratch*"
      "Stores the return buffer for the ejm-shell command.")
    (defun ejm-shell()
      "Switch to the eshell window or return to previous"
      (interactive)
      (cond ((equal (buffer-name) "*eshell*")
             (switch-to-buffer ejm-saved-buffer))
            (t
             (setq ejm-saved-buffer (buffer-name))
             (switch-to-buffer "*eshell*"))))
    :init
    (eshell)
    (global-set-key [f12] 'ejm-shell))
#+end_src

* Git

** Enable git-gutter-fringe

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :init (setq git-gutter-fr:side 'right-fringe)
    :config (global-git-gutter-mode t))
#+end_src

** git configuration file mode

#+begin_src emacs-lisp
  (use-package git-modes
    :ensure t)
#+end_src

** git blame in a buffer

Run mo-git-blame-current

#+begin_src emacs-lisp :tangle no
  (use-package mo-git-blame
    :ensure t)
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands magit-status magit-blame magit-section
    :init
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    :config
    (setq magit-branch-arguments nil
          ;; use ido to look for branches
          ;;magit-completing-read-function 'magit-ido-completing-read
          ;; don't put "origin-" in front of new branch names by default
          magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
          magit-push-always-verify nil
          ;; Get rid of the previous advice to go into fullscreen
          magit-restore-window-configuration t)

    :bind ("C-x g" . magit-status))
#+end_src

* Programming

Various modes and tools for programming.

** ElDoc

#+begin_src emacs-lisp
  (use-package eldoc
    :defer t)
#+end_src

** lsp-mode

[[https://emacs-lsp.github.io/lsp-mode/][LSP Mode - LSP Support for Emacs]] 

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; enable / disable the hints as you prefer:
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))

  (use-package consult-lsp)
#+end_src


** Rust

*** Rustic

#+begin_src emacs-lisp
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status)
                ("C-c C-c C-q" . ejm/cargo-run))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'ejm/rustic-mode-hook))

  (defun ejm/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

  (defun ejm/cargo-run ()
    "Build and run Rust code."
    (interactive)
    (rustic-cargo-run)
    (let (
          (orig-win (selected-window))
          (run-win (display-buffer (get-buffer "**cargo-run**") nil 'visible))
          )
      (select-window run-win)
      (comint-mode)
      (read-only-mode 0)
      (end-of-buffer)
      )
    )
#+end_src


** C/C++
#+begin_src emacs-lisp
  (use-package cc-mode
    :elpaca nil
    :preface
    (defun ejm/cc-mode-hook ()
      (lsp)
      (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols)
      (c-set-style "stroustrup")
      (setq-default indent-tabs-mode nil)
      (setq c-basic-offset 4))

    :init
    (add-hook 'c++-mode-hook 'ejm/cc-mode-hook))
#+end_src

** Debugging (dap-mode)

#+begin_src emacs-lisp :tangle no
  (use-package dap-mode
    :defer
    :custom
    (dap-auto-configure-mode t                           "Automatically configure dap.")
    (dap-auto-configure-features
     '(sessions locals breakpoints expressions tooltip)  "Remove the button panel in the top.")
    :config
        ;;; dap for c++
    (require 'dap-lldb)

          ;;; set the debugger executable (c++)
    (setq dap-lldb-debug-program
          `(,(expand-file-name "~/.vscode/extensions/lanza.lldb-vscode-0.2.3/bin/darwin/bin/lldb-vscode")))

    ;;; ask user for executable to debug if not specified explicitly (c++)
  ;      (setq dap-lldb-debugged-program-function (lambda () (read-file-name "Select file to debug.")))

    ;;; default debug template for (c++)
    (dap-register-debug-template
     "C++ LLDB dap"
     (list :type "lldb-vscode"
           :cwd nil
           :args nil
           :request "launch"
           :program nil))

    (defun dap-debug-create-or-edit-json-template ()
      "Edit the C++ debugging configuration or create + edit if none exists yet."
      (interactive)
      (let ((filename (concat (lsp-workspace-root) "/launch.json"))
            (default "~/.emacs.d/default-launch.json"))
        (unless (file-exists-p filename)
          (copy-file default filename))
        (find-file-existing filename))))
#+end_src

** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    (add-hook 'c++-mode-hook
              (lambda () (setq flycheck-clang-language-standard "c++17")))
    :delight "")
#+end_src

** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :init
    (add-hook 'typescript-mode-hook 'lsp-deferred)
    (add-hook 'javascript-mode-hook 'lsp-deferred)
    )
  ;; (use-package dap-node
  ;;   :elpaca nil
  ;;   :ensure t
  ;;   :config
  ;;   (defun ejm/setup-dap-node ()
  ;;     "Require dap-node feature and run dap-node-setup if VSCode module isn't already installed"
  ;;     (require 'dap-node)
  ;;     (unless (file-exists-p dap-node-debug-path) (dap-node-setup)))
  ;;   :init
  ;;   (add-hook 'typescript-mode-hook 'ejm/setup-dap-node)
  ;;   (add-hook 'javascript-mode-hook 'ejm/setup-dap-node))
#+end_src

* Org mode

** DeNote

#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :config
    (setq denote-directory (expand-file-name "~/org/notes"))
    (setq denote-known-keywords '("meeting" "project" "team" "learning"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (add-hook 'dired-mode-hook #'denote-dired-mode))
#+end_src

** Deft

#+begin_src emacs-lisp :tangle no
  (use-package deft
    :ensure t
    :bind ("<f8>" . deft)
    :commands (deft)
    :config
    (setq deft-directory "~/org/notes"
          deft-default-extension "org"
          deft-text-mode 'org-mode
          deft-org-mode-title-prefix t
          deft-extensions '("md" "org")
          deft-use-filter-string-for-filename t
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)))
    (global-set-key (kbd "C-x C-g") 'deft-find-file))
#+end_src

** Toc-org

#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :init (add-hook 'org-mode-hook #'toc-org-enable))
#+end_src

** Kanban

#+begin_src emacs-lisp
  (use-package org-kanban
    :after org
    :ensure t)
#+end_src

** Babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)))
#+end_src

* Mastodon

#+begin_src emacs-lisp
  (use-package mastodon
    :ensure t
    :config
    (mastodon-discover)
    (setq mastodon-instance-url "https://nutmeg.social"
          mastodon-active-user "gwonk"))
#+end_src

* Misc helpful settings

** Dictionary

[[https://irreal.org/blog/?p=10824][Webster 1913 and dictionary.el]] and [[http://jsomers.net/blog/dictionary][You're probably using the wrong
dictionary]]

#+begin_src emacs-lisp
  (setq dictionary-server "dict.org")
#+end_src
** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode +1))
#+end_src

** Save History

#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :elpaca nil
    :init
    (savehist-mode))
#+end_src

** Auto-revert mode

Revert buffers automatically when the underlying files change.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

* MacOS
MacOS Customizations
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
  ;(straight-use-package
  ; '(exec-path-from-shell
  ;   :type git
  ;   :host github
  ;   :repo "purcell/exec-path-from-shell"))
  ;; Are we on a mac?
  (setq is-mac (equal system-type 'darwin))

  (when is-mac
    ;; fix exec-path
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
  (when is-mac
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'super)))
#+end_src

* Post Initialization

Reset GC thresholds to more reasonable numbers.

#+begin_src emacs-lisp
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1)
#+end_src
