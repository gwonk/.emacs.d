#+TITLE: Emacs Literate Configuration
#+AUTHOR:  Eric Miller
#+PROPERTY: header-args :tangle yes

* Introduction
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:

** About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

This was originally authored by Andr√©s Ejmson and titled [[https://github.com/frap/emacs-literate][Atea Emacs
Literate Configuration]].  

** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+begin_src :tangle no
header-args :tangle yes
#+end_src

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show it's direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_3_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 3 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.

** Personal Information
Let's set some variables with basic user information.

#+begin_src emacs-lisp
(setq user-full-name "Eric Miller"
      user-mail-address "eric@gwonk.com")
#+end_src

* Emacs Initialization

** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+begin_src emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+end_src

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+begin_src emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+end_src

** Integrate with use-package

#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (use-package straight
    :custom
    (straight-use-package-by-default t))
#+end_src

* Configure nano

** Install nano and its dependencies

#+begin_src emacs-lisp
  (straight-use-package
   '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))
#+end_src

** Setup fonts

#+begin_src emacs-lisp
  (setq nano-font-family-monospaced "Input Mono Narrow")
  (setq nano-font-family-proportional nil)
  (setq nano-font-size 14)
  ;(set-frame-font "Input Mono Narrow-14")
#+end_src

** Load the nano layout

#+begin_src emacs-lisp
  (require 'nano-layout)
#+end_src

** Set up nano font faces

#+begin_src emacs-lisp
  (require 'nano-faces)
  (nano-faces)
#+end_src

** Set up the nano theme

#+begin_src emacs-lisp
  (require 'nano-theme)
  (nano-theme)
#+end_src

** Load nano defaults

#+begin_src emacs-lisp
  (require 'nano-defaults)
#+end_src

** Enable nano session handling

#+begin_src emacs-lisp
  (require 'nano-session)
#+end_src

** Enable the nano modeline

#+begin_src emacs-lisp
  (require 'nano-modeline)
#+end_src

** Enable dark theme

#+begin_src emacs-lisp
  (require 'nano-theme-dark)
  (nano-theme-set-dark)
  (call-interactively 'nano-refresh-theme)
#+end_src

* Git

** Enable git-gutter-fringe

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :init (setq git-gutter-fr:side 'right-fringe)
    :config (global-git-gutter-mode t))
#+end_src

** git configuration file mode

#+begin_src emacs-lisp
  (use-package git-modes
    :ensure t)
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands magit-status magit-blame magit-section
    :init
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    :config
    (setq magit-branch-arguments nil
          ;; use ido to look for branches
          magit-completing-read-function 'magit-ido-completing-read
          ;; don't put "origin-" in front of new branch names by default
          magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
          magit-push-always-verify nil
          ;; Get rid of the previous advice to go into fullscreen
          magit-restore-window-configuration t)
  
    :bind ("C-x g" . magit-status))

#+end_src
